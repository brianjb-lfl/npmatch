import Index from '../index.js';

it('renders without crashing', () => {
  expect(typeof Index).toBe('object');
});

// https://wetainment.com/testing-indexjs/

/* Index file as consoles...
Provider {
  props:
   { store:
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer],
        [Symbol(observable)]: [Function: observable] },
     children:
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: {},
        _owner: null,
        _store: {} } },
  context: {},
  refs: {},
  updater:
   { isMounted: [Function: isMounted],
     enqueueSetState: [Function: enqueueSetState],
     enqueueReplaceState: [Function: enqueueReplaceState],
     enqueueForceUpdate: [Function: enqueueForceUpdate] },
  store:
   { dispatch: [Function],
     subscribe: [Function: subscribe],
     getState: [Function: getState],
     replaceReducer: [Function: replaceReducer],
     [Symbol(observable)]: [Function: observable] },
  _reactInternalFiber:
   FiberNode {
     tag: 2,
     key: null,
     type: { [Function: Provider] propTypes: [Object], childContextTypes: [Object] },
     stateNode: [Circular],
     return:
      FiberNode {
        tag: 3,
        key: null,
        type: null,
        stateNode: [Object],
        return: null,
        child: [Circular],
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: null,
        updateQueue: null,
        memoizedState: [Object],
        internalContextTag: 0,
        effectTag: 0,
        nextEffect: null,
        firstEffect: [Object],
        lastEffect: [Circular],
        expirationTime: 1,
        alternate: [Object],
        _debugID: 1,
        _debugSource: null,
        _debugOwner: null,
        _debugIsCurrentlyTiming: false },
     child:
      FiberNode {
        tag: 2,
        key: null,
        type: [Object],
        stateNode: [Object],
        return: [Circular],
        child: [Object],
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: {},
        updateQueue: [Object],
        memoizedState: {},
        internalContextTag: 0,
        effectTag: 5,
        nextEffect: null,
        firstEffect: [Object],
        lastEffect: [Object],
        expirationTime: 1,
        alternate: [Object],
        _debugID: 4,
        _debugSource: [Object],
        _debugOwner: null,
        _debugIsCurrentlyTiming: false },
     sibling: null,
     index: 0,
     ref: null,
     pendingProps: null,
     memoizedProps: { store: [Object], children: [Object] },
     updateQueue: null,
     memoizedState: null,
     internalContextTag: 0,
     effectTag: 1,
     nextEffect: null,
     firstEffect:
      FiberNode {
        tag: 2,
        key: '0',
        type: [Object],
        stateNode: [Object],
        return: [Object],
        child: [Object],
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: [Object],
        updateQueue: null,
        memoizedState: {},
        internalContextTag: 0,
        effectTag: 5,
        nextEffect: null,
        firstEffect: null,
        lastEffect: null,
        expirationTime: 0,
        alternate: [Object],
        _debugID: 32,
        _debugSource: [Object],
        _debugOwner: [Object],
        _debugIsCurrentlyTiming: false },
     lastEffect:
      FiberNode {
        tag: 2,
        key: null,
        type: [Object],
        stateNode: [Object],
        return: [Circular],
        child: [Object],
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: {},
        updateQueue: [Object],
        memoizedState: {},
        internalContextTag: 0,
        effectTag: 5,
        nextEffect: null,
        firstEffect: [Object],
        lastEffect: [Object],
        expirationTime: 1,
        alternate: [Object],
        _debugID: 4,
        _debugSource: [Object],
        _debugOwner: null,
        _debugIsCurrentlyTiming: false },
     expirationTime: 1,
     alternate:
      FiberNode {
        tag: 2,
        key: null,
        type: [Object],
        stateNode: [Circular],
        return: [Object],
        child: [Object],
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: [Object],
        updateQueue: null,
        memoizedState: null,
        internalContextTag: 0,
        effectTag: 0,
        nextEffect: null,
        firstEffect: [Object],
        lastEffect: [Object],
        expirationTime: 0,
        alternate: [Circular],
        _debugID: 3,
        _debugSource: [Object],
        _debugOwner: null,
        _debugIsCurrentlyTiming: false },
     _debugID: 3,
     _debugSource:
      { fileName: '/Users/bradgarner/Desktop/Thinkful/npmatch/client/src/index.js',
        lineNumber: 9 },
     _debugOwner: null,
     _debugIsCurrentlyTiming: false },
  _reactInternalInstance: {},
  state: null,
  __reactInternalMemoizedMergedChildContext:
   { store:
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer],
        [Symbol(observable)]: [Function: observable] },
     storeSubscription: null } }
     */